[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.3.0","content-config-digest","a22482b0cf65ab56","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[]},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":\"shiki\",\"shikiConfig\":{\"langs\":[],\"langAlias\":{\"js\":\"javascript\"},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false,\"serializeConfig\":false},\"legacy\":{\"collections\":false}}","articles",["Map",11,12,24,25,32,33],"becoming-consistent-in-programming",{"id":11,"data":13,"body":19,"filePath":20,"digest":21,"legacyId":22,"deferredRender":23},{"title":14,"author":15,"date":16,"featured":17,"image":18},"Becoming Consistent in Programming","Oplano","1/23/2025",false,"/favicon.svg","Consistency is the key to mastering programming. Here’s how you can build a routine that keeps you growing as a developer:\n\n1. Set a Daily Practice Goal – Even 30–60 minutes of coding daily helps reinforce concepts and build muscle memory.\n\n2. Work on Real Projects – Apply your knowledge by building small projects. Websites, automation scripts, and open-source contributions are great starting points.\n\n3. Follow a Learning Plan – Structure your studies based on your goals, whether it’s web development, data science, or backend engineering.\n\n4. Stay Accountable – Join coding communities, find a mentor, or participate in challenges like #100DaysOfCode.\n\n5. Review & Refactor Code – Improving old code helps solidify concepts and enhances problem-solving skills.\n\n6. Avoid Burnout – Consistency doesn’t mean overworking. Take breaks, enjoy the process, and maintain a balanced schedule.\n\nThe key is discipline over motivation. Small, steady improvements lead to long-term mastery.","src/content/articles/becoming-consistent-in-programming.mdx","17605cde1fb838a6","becoming-consistent-in-programming.mdx",true,"learnin-astro",{"id":24,"data":26,"body":28,"filePath":29,"digest":30,"legacyId":31,"deferredRender":23},{"title":27,"author":15,"date":16,"featured":17,"image":18},"Learning Astro from Level 0z","Astro is a modern web framework designed for building fast, content-driven websites. If you're starting from scratch, here’s how to get up to speed:\n\n1. Understand the Basics – Astro focuses on static site generation (SSG) but allows interactive components from React, Vue, and other frameworks. Read the official documentation to grasp the fundamentals.\n\n2. Installation & Setup – Install Astro using:\n\n```\nnpm create astro@latest\ncd my-astro-project\nnpm install\nnpm run dev\n```\n\n3. Learn Astro Components – Unlike React, Astro ships minimal JavaScript by default. Use .astro files to create static pages while embedding dynamic components when necessary.\n\n4. Enhancing with Integrations – Astro supports Tailwind, MDX, and other tools for styling and content management.\n\n5. Deploying Your Astro Site – You can deploy Astro sites easily on platforms like Vercel, Netlify, or GitHub Pages.\n\nWith its lightweight approach and partial hydration features, Astro is perfect for blogs, landing pages, and documentation sites.","src/content/articles/learnin-astro.mdx","d177a504e8508c89","learnin-astro.mdx","react-19-features",{"id":32,"data":34,"body":36,"filePath":37,"digest":38,"legacyId":39,"deferredRender":23},{"title":35,"author":15,"date":16,"featured":17,"image":18},"React 19 Features","React 19, the latest major release, introduces several new features aimed at improving performance, developer experience, and reactivity. Here are the highlights:\n\n1. React Compiler – Automatically optimizes component re-renders to boost performance.\n\n2. Actions API – Simplifies server-side interactions with better form handling and state management.\n\n3. Asset Loading APIs – A new way to manage images, fonts, and other assets efficiently.\n\n4. Improved Suspense – Enhancements in streaming and lazy loading for better user experience.\n\n5. useOptimistic Hook – Provides a smoother UI experience by predicting state updates before the server responds.\n\n6. New Event System – React has improved its event delegation and synthetic events for faster updates.\n\n7. React Server Components (RSC) Enhancements – Better support for Next.js, making SSR (Server-Side Rendering) more efficient.\n\nReact 19 focuses on performance optimizations, developer-friendly APIs, and improved user experiences for modern web applications.","src/content/articles/react-19-features.mdx","5520586e4db26a41","react-19-features.mdx"]